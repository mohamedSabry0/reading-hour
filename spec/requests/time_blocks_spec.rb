require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/time_blocks', type: :request do
  # TimeBlock. As you add validations to TimeBlock, be sure to
  # adjust the attributes here as well.
  let(:user) { User.create! username: 'one' }
  let(:group) do
    Group.create! name: 'abc',
                  icon: Rack::Test::UploadedFile.new('app/assets/images/iconfinder_Development_5355692.png', 'image/png'),
                  user_id: user.id
  end
  let(:valid_attributes) do
    { name: 'fwf', amount: 2, group_list: 'abc', author_id: user.id }
  end

  let(:invalid_attributes) do
    { name: nil, amount: 2, group_list: group }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      TimeBlock.create! valid_attributes
      get time_blocks_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      time_block = TimeBlock.create! valid_attributes
      get time_block_url(time_block)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_time_block_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      time_block = TimeBlock.create! valid_attributes
      get edit_time_block_url(time_block)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new TimeBlock' do
        expect do
          post time_blocks_url, params: { time_block: valid_attributes }
        end.to change(TimeBlock, :count).by(1)
      end

      it 'redirects to the created time_block' do
        post time_blocks_url, params: { time_block: valid_attributes }
        expect(response).to redirect_to(time_block_url(TimeBlock.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new TimeBlock' do
        expect do
          post time_blocks_url, params: { time_block: invalid_attributes }
        end.to change(TimeBlock, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post time_blocks_url, params: { time_block: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested time_block' do
        time_block = TimeBlock.create! valid_attributes
        patch time_block_url(time_block), params: { time_block: new_attributes }
        time_block.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the time_block' do
        time_block = TimeBlock.create! valid_attributes
        patch time_block_url(time_block), params: { time_block: new_attributes }
        time_block.reload
        expect(response).to redirect_to(time_block_url(time_block))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        time_block = TimeBlock.create! valid_attributes
        patch time_block_url(time_block), params: { time_block: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested time_block' do
      time_block = TimeBlock.create! valid_attributes
      expect do
        delete time_block_url(time_block)
      end.to change(TimeBlock, :count).by(-1)
    end

    it 'redirects to the time_blocks list' do
      time_block = TimeBlock.create! valid_attributes
      delete time_block_url(time_block)
      expect(response).to redirect_to(time_blocks_url)
    end
  end
end
